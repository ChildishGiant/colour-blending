{
  "version": 3,
  "sources": ["../source/index.js"],
  "sourcesContent": ["import \"styles.sass\";\n\n\nlet colours = [];\nlet table;\nlet head;\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nwindow.onload = function () {\n  table = document.getElementById(\"comparison\");\n  head = table.rows[0];\n\n  document.getElementById(\"add-colour\").onclick = addColour;\n  document.getElementById(\"remove-colour\").onclick = removeColour;\n  document.getElementById(\"blend-mode\").onchange = blendModeChanged;\n\n  addColour(\"#000000\");\n  addColour(\"#ffffff\");\n\n}\n\nlet addColour = function (colour) {\n\n  let id = \"colour-picker-\"+colours.length;\n  let picker = document.createElement(\"input\");\n  picker.type = \"color\";\n  picker.dataset.colour = colours.length;\n  picker.value = typeof colour == \"string\" ? colour : getRandomColor();\n\n  picker.addEventListener(\"input\", colourChanged);\n\n  let clone = picker.cloneNode(true);\n  // Not sure why but clones don't clone listners\n  clone.addEventListener(\"input\", colourChanged);\n\n  colours.push(picker.value)\n\n  // Add a row\n  table.insertRow();\n\n  // Add cells to every row\n  for (index in Array.from(table.rows)) {\n\n    let row = table.rows[index];\n\n    // If not on the last row add a cell\n    if (index != colours.length ) {\n      let cell = row.insertCell();\n\n      // If on first row, fill with colour picker\n      if (index == 0) {\n        cell.appendChild(picker);\n        continue\n      } else {\n        let overlay = document.createElement(\"colour-overlay\");\n        cell.appendChild(overlay)\n      }\n\n    }\n    // On last row, fill out all the cells\n    else {\n      for (let i = 0; i <= colours.length; i++) {\n        let cell = row.insertCell();\n\n        // If on the first column add the colour picker\n        if (i == 0) {\n          cell.appendChild(clone);\n        } else {\n          // Otherwise add a colour overlay\n          let overlay = document.createElement(\"colour-overlay\");\n          cell.appendChild(overlay)\n        }\n      }\n    }\n\n  }\n\n}\n\nlet removeColour = function () {\n\n\n  if (colours.length == 1) { return }\n\n  table.deleteRow(colours.length);\n\n  for (index in Array.from(table.rows)) {\n    let row = table.rows[index];\n    row.deleteCell(colours.length);\n  }\n\n  colours.pop();\n\n}\n\nwindow.colourChanged = function (event) {\n\n  let id = this.dataset.colour;\n\n  // Update the other picker\n  let picker = document.querySelectorAll(\"input[type=color][data-colour=\\\"\"+id+\"\\\"]\");\n  picker.forEach( el => {el.value = this.value});\n\n\n  // let toUpdate = document.querySelectorAll(\"colour-overlay\");\n\n  for (index in Array.from(table.rows)) {\n\n    let row = table.rows[index];\n\n    for (var cell in Array.from(row.cells)) {\n\n      if (cell-1 == id) {\n        let overlay = row.cells[cell].querySelector(\"colour-overlay\");\n\n        if (overlay){\n          overlay.setAttribute(\"colour-1\", this.value);\n        }\n      }\n\n      if (index-1 == id) {\n        let overlay = row.cells[cell].querySelector(\"colour-overlay\");\n\n        if (overlay){\n          overlay.setAttribute(\"colour-2\", this.value);\n        }\n      }\n    }\n  }\n}\n\nwindow.blendModeChanged = function (event) {\n\n  document.querySelectorAll(\"colour-overlay\").forEach( el => {\n    // console.log(el)\n    el.setAttribute(\"blend-mode\", this.value);\n  })\n}\n\nclass Overlay extends HTMLElement {\n  constructor() {\n    super();\n    // element created\n\n    // Get colours\n    let colour1 = this.getAttribute(\"colour-1\");\n    let colour2 = this.getAttribute(\"colour-2\");\n\n    const shadow = this.attachShadow({mode: 'open'});\n\n    const style = document.createElement('style');\n    style.textContent = `\n    .colour-1 {\n      width: 2em;\n      height: 2em;\n    }\n\n    .colour-2 {\n      width: 2em;\n      height: 2em;\n      position: absolute;\n\n    }\n    `;\n\n    const colour1elem = document.createElement('div');\n    colour1elem.classList.add(\"colour-1\");\n\n    const colour2elem = document.createElement('div');\n    colour2elem.classList.add(\"colour-2\");\n\n    shadow.appendChild(colour1elem);\n    colour1elem.appendChild(colour2elem);\n    shadow.appendChild(style);\n\n  }\n\n  connectedCallback() {\n    // browser calls this method when the element is added to the document\n    // (can be called many times if an element is repeatedly added/removed)\n  }\n\n  disconnectedCallback() {\n    // browser calls this method when the element is removed from the document\n    // (can be called many times if an element is repeatedly added/removed)\n  }\n\n  static get observedAttributes() {\n    return [\"colour-1\", \"colour-2\", \"blend-mode\"];\n  }\n\n  attributeChangedCallback(name, oldValue, newValue) {\n    console.log(name, oldValue, newValue);\n    console.log(this.shadowRoot);\n    // called when one of attributes listed above is modified\n    switch (name) {\n      case \"colour-1\":\n        this.shadowRoot.querySelector(\".colour-1\").style.backgroundColor = newValue;\n        break;\n      case \"colour-2\":\n        this.shadowRoot.querySelector(\".colour-2\").style.backgroundColor = newValue;\n      case \"blend-mode\":\n        this.shadowRoot.querySelector(\".colour-2\").style.mixBlendMode = newValue;\n    }\n  }\n\n  adoptedCallback() {\n    // called when the element is moved to a new document\n    // (happens in document.adoptNode, very rarely used)\n  }\n\n  // there can be other element methods and properties\n}\ncustomElements.define(\"colour-overlay\", Overlay);\n"],
  "mappings": "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",
  "names": []
}
